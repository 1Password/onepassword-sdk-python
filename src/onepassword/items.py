# Code generated by op-codegen - DO NO EDIT MANUALLY

from .core import _invoke
from .iterator import SDKIterator
from pydantic import TypeAdapter
from .items_shares import ItemsShares
from .types import Item, ItemCreateParams, ItemOverview


class Items:
    """
    The Items API holds all operations the SDK client can perform on 1Password items.
    """

    def __init__(self, client_id):
        self.client_id = client_id
        self.shares = ItemsShares(client_id)

    async def create(self, params: ItemCreateParams) -> Item:
        """
        Create a new item.
        """
        response = await _invoke(
            {
                "invocation": {
                    "clientId": self.client_id,
                    "parameters": {
                        "name": "ItemsCreate",
                        "parameters": {"params": params.model_dump(by_alias=True)},
                    },
                }
            }
        )

        response = TypeAdapter(Item).validate_json(response)
        return response

    async def get(self, vault_id: str, item_id: str) -> Item:
        """
        Get an item by vault and item ID
        """
        response = await _invoke(
            {
                "invocation": {
                    "clientId": self.client_id,
                    "parameters": {
                        "name": "ItemsGet",
                        "parameters": {"vault_id": vault_id, "item_id": item_id},
                    },
                }
            }
        )

        response = TypeAdapter(Item).validate_json(response)
        return response

    async def put(self, item: Item) -> Item:
        """
        Update an existing item.
        """
        response = await _invoke(
            {
                "invocation": {
                    "clientId": self.client_id,
                    "parameters": {
                        "name": "ItemsPut",
                        "parameters": {"item": item.model_dump(by_alias=True)},
                    },
                }
            }
        )

        response = TypeAdapter(Item).validate_json(response)
        return response

    async def delete(self, vault_id: str, item_id: str):
        """
        Delete an item.
        """
        response = await _invoke(
            {
                "invocation": {
                    "clientId": self.client_id,
                    "parameters": {
                        "name": "ItemsDelete",
                        "parameters": {"vault_id": vault_id, "item_id": item_id},
                    },
                }
            }
        )

        return None

    async def archive(self, vault_id: str, item_id: str):
        """
        Archive an item.
        """
        response = await _invoke(
            {
                "invocation": {
                    "clientId": self.client_id,
                    "parameters": {
                        "name": "ItemsArchive",
                        "parameters": {"vault_id": vault_id, "item_id": item_id},
                    },
                }
            }
        )

        return None

    async def list_all(self, vault_id: str) -> SDKIterator[ItemOverview]:
        """
        List all items
        """
        response = await _invoke(
            {
                "invocation": {
                    "clientId": self.client_id,
                    "parameters": {
                        "name": "ItemsListAll",
                        "parameters": {"vault_id": vault_id},
                    },
                }
            }
        )

        response = TypeAdapter(list[ItemOverview]).validate_json(response)
        return SDKIterator(response)
