"""
Generated by typeshare 1.13.2
"""

from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import List, Literal, Optional, Union


class GeneratePasswordResponse(BaseModel):
    """
    For future use, if we want to return more information about the generated password.
    Currently, it only returns the password itself.
    """

    password: str
    """
    The generated password.
    """


class ItemCategory(str, Enum):
    LOGIN = "Login"
    SECURENOTE = "SecureNote"
    CREDITCARD = "CreditCard"
    CRYPTOWALLET = "CryptoWallet"
    IDENTITY = "Identity"
    PASSWORD = "Password"
    DOCUMENT = "Document"
    APICREDENTIALS = "ApiCredentials"
    BANKACCOUNT = "BankAccount"
    DATABASE = "Database"
    DRIVERLICENSE = "DriverLicense"
    EMAIL = "Email"
    MEDICALRECORD = "MedicalRecord"
    MEMBERSHIP = "Membership"
    OUTDOORLICENSE = "OutdoorLicense"
    PASSPORT = "Passport"
    REWARDS = "Rewards"
    ROUTER = "Router"
    SERVER = "Server"
    SSHKEY = "SshKey"
    SOCIALSECURITYNUMBER = "SocialSecurityNumber"
    SOFTWARELICENSE = "SoftwareLicense"
    PERSON = "Person"
    UNSUPPORTED = "Unsupported"


class ItemFieldType(str, Enum):
    TEXT = "Text"
    CONCEALED = "Concealed"
    CREDITCARDTYPE = "CreditCardType"
    CREDITCARDNUMBER = "CreditCardNumber"
    PHONE = "Phone"
    URL = "Url"
    TOTP = "Totp"
    EMAIL = "Email"
    REFERENCE = "Reference"
    UNSUPPORTED = "Unsupported"


class ItemFieldDetailsTypes(str, Enum):
    OTP = "Otp"


class ItemFieldDetailsOtp(BaseModel):
    """
    The computed OTP code and other details
    """

    type: Literal[ItemFieldDetailsTypes.OTP] = ItemFieldDetailsTypes.OTP
    content: OtpFieldDetails


# Field type-specific attributes.
ItemFieldDetails = ItemFieldDetailsOtp


class ItemField(BaseModel):
    """
    Represents a field within an item.
    """

    model_config = ConfigDict(populate_by_name=True)

    id: str
    """
    The field's ID
    """
    title: str
    """
    The field's title
    """
    section_id: Optional[str] = Field(alias="sectionId", default=None)
    """
    The ID of the section containing the field. Built-in fields such as usernames and passwords don't require a section.
    """
    field_type: ItemFieldType = Field(alias="fieldType")
    """
    The field's type
    """
    value: str
    """
    The string representation of the field's value
    """
    details: Optional[ItemFieldDetails] = Field(default=None)
    """
    Field type-specific attributes.
    """


class ItemSection(BaseModel):
    """
    A section groups together multiple fields in an item.
    """

    id: str
    """
    The section's unique ID
    """
    title: str
    """
    The section's title
    """


class AutofillBehavior(str, Enum):
    """
    Controls the auto-fill behavior of a website.


    For more information, visit https://support.1password.com/autofill-behavior/
    """

    ANYWHEREONWEBSITE = "AnywhereOnWebsite"
    """
    Auto-fill any page thatâ€™s part of the website, including subdomains
    """
    EXACTDOMAIN = "ExactDomain"
    """
    Auto-fill only if the domain (hostname and port) is an exact match.
    """
    NEVER = "Never"
    """
    Never auto-fill on this website
    """


class Website(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    url: str
    """
    The website URL
    """
    label: str
    """
    The label of the website, e.g. 'website', 'sign-in address'
    """
    autofill_behavior: AutofillBehavior = Field(alias="autofillBehavior")
    """
    The auto-fill behavior of the website
    
    For more information, visit https://support.1password.com/autofill-behavior/
    """


class Item(BaseModel):
    """
    Represents a 1Password item.
    """

    model_config = ConfigDict(populate_by_name=True)

    id: str
    """
    The item's ID
    """
    title: str
    """
    The item's title
    """
    category: ItemCategory
    """
    The item's category
    """
    vault_id: str = Field(alias="vaultId")
    """
    The ID of the vault where the item is saved
    """
    fields: List[ItemField]
    """
    The item's fields
    """
    sections: List[ItemSection]
    """
    The item's sections
    """
    tags: List[str]
    """
    The item's tags
    """
    websites: List[Website]
    """
    The websites used for autofilling for items of the Login and Password categories.
    """
    version: int
    """
    The item's version
    """


class ItemCreateParams(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    category: ItemCategory
    """
    The item's category
    """
    vault_id: str = Field(alias="vaultId")
    """
    The ID of the vault where the item is saved
    """
    title: str
    """
    The item's title
    """
    fields: Optional[List[ItemField]] = Field(default=None)
    """
    The item's fields
    """
    sections: Optional[List[ItemSection]] = Field(default=None)
    """
    The item's sections
    """
    tags: Optional[List[str]] = Field(default=None)
    """
    The item's tags
    """
    websites: Optional[List[Website]] = Field(default=None)
    """
    The websites used for autofilling for items of the Login and Password categories.
    """


class ItemOverview(BaseModel):
    """
    Represents a decrypted 1Password item.
    """

    model_config = ConfigDict(populate_by_name=True)

    id: str
    """
    The item's ID
    """
    title: str
    """
    The item's title
    """
    category: ItemCategory
    """
    The item's category
    """
    vault_id: str = Field(alias="vaultId")
    """
    The ID of the vault where the item is saved
    """
    websites: List[Website]
    """
    The websites used for autofilling for items of the Login and Password categories.
    """


class ItemsShareDuration(str, Enum):
    """
    The valid duration options for sharing an item
    """

    ONEHOUR = "OneHour"
    """
    The share will expire in one hour
    """
    ONEDAY = "OneDay"
    """
    The share will expire in one day
    """
    SEVENDAYS = "SevenDays"
    """
    The share will expire in seven days
    """
    FOURTEENDAYS = "FourteenDays"
    """
    The share will expire in fourteen days
    """
    THIRTYDAYS = "ThirtyDays"
    """
    The share will expire in thirty days
    """


class AllowedType(str, Enum):
    """
    The allowed types of item sharing, enforced by account policy
    """

    AUTHENTICATED = "Authenticated"
    """
    Allows the "OnlySomePeople" share type
    """
    PUBLIC = "Public"
    """
    Allows the "AnyoneWithALink" share type
    """


class AllowedRecipientType(str, Enum):
    """
    The allowed recipient types of item sharing, enforced by account policy
    """

    EMAIL = "Email"
    """
    Recipients can be specified by email address
    """
    DOMAIN = "Domain"
    """
    Recipients can be specified by domain
    """


class ItemsShareAccountPolicy(BaseModel):
    """
    The account policy for sharing items, set by your account owner/admin
    This policy is enforced server-side when sharing items
    """

    model_config = ConfigDict(populate_by_name=True)

    max_expiry: ItemsShareDuration = Field(alias="maxExpiry")
    """
    The maximum duration that an item can be shared for
    """
    default_expiry: ItemsShareDuration = Field(alias="defaultExpiry")
    """
    The default duration that an item is shared for
    """
    max_views: Optional[int] = Field(alias="maxViews", default=None)
    """
    The maximum number of times an item can be viewed. A null value means unlimited views
    """
    allowed_types: List[AllowedType] = Field(alias="allowedTypes")
    """
    The allowed types of item sharing - either "Authenticated" (share to specific users) or "Public" (share to anyone with a link)
    """
    allowed_recipient_types: List[AllowedRecipientType] = Field(
        alias="allowedRecipientTypes"
    )
    """
    The allowed recipient types of item sharing - either "Email" or "Domain"
    """


class ShareTypeOnlySomePeopleInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `OnlySomePeople` of the `ShareType` Rust enum
    """

    recipients: List[ValidRecipient]


class ShareTypeTypes(str, Enum):
    ANYONE_WITH_A_LINK = "AnyoneWithALink"
    ONLY_SOME_PEOPLE = "OnlySomePeople"


class ShareTypeAnyoneWithALink(BaseModel):
    """
    Anyone receiving the sharing link can access the item
    """

    type: Literal[ShareTypeTypes.ANYONE_WITH_A_LINK] = ShareTypeTypes.ANYONE_WITH_A_LINK


class ShareTypeOnlySomePeople(BaseModel):
    """
    Only people with the specified email addresses or domains can access the item
    """

    type: Literal[ShareTypeTypes.ONLY_SOME_PEOPLE] = ShareTypeTypes.ONLY_SOME_PEOPLE
    parameters: ShareTypeOnlySomePeopleInner


# The item share intended recipients: either anyone with a link or only specific people
ShareType = Union[ShareTypeAnyoneWithALink, ShareTypeOnlySomePeople]


class ItemsShareParams(BaseModel):
    """
    The configuration options for sharing an item
    These must respect the account policy on item sharing
    """

    model_config = ConfigDict(populate_by_name=True)

    share_type: Optional[ShareType] = Field(alias="shareType", default=None)
    """
    Emails or domains of the item share recipients
    """
    expire_after: Optional[ItemsShareDuration] = Field(
        alias="expireAfter", default=None
    )
    """
    The duration of the share in seconds
    """
    one_time_only: bool = Field(alias="oneTimeOnly")
    """
    Whether the item can only be viewed only once per recipient
    """


class OtpFieldDetails(BaseModel):
    """
    Additional attributes for OTP fields.
    """

    model_config = ConfigDict(populate_by_name=True)

    code: Optional[str] = Field(default=None)
    """
    The OTP code, if successfully computed
    """
    error_message: Optional[str] = Field(alias="errorMessage", default=None)
    """
    The error message, if the OTP code could not be computed
    """


class VaultOverview(BaseModel):
    """
    Represents a decrypted 1Password vault.
    """

    id: str
    """
    The vault's ID
    """
    title: str
    """
    The vault's title
    """


class PasswordRecipeMemorableInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Memorable` of the `PasswordRecipe` Rust enum
    """

    model_config = ConfigDict(populate_by_name=True)

    separator_type: SeparatorType = Field(alias="separatorType")
    """
    The type of separator between chunks.
    """
    capitalize: bool
    """
    Uppercase one randomly selected chunk.
    """
    word_list_type: WordListType = Field(alias="wordListType")
    """
    The type of word list used.
    """
    word_count: int = Field(alias="wordCount")
    """
    The number of "words" (words or syllables).
    """


class PasswordRecipePinInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Pin` of the `PasswordRecipe` Rust enum
    """

    length: int
    """
    Number of digits in the PIN.
    """


class PasswordRecipeRandomInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Random` of the `PasswordRecipe` Rust enum
    """

    model_config = ConfigDict(populate_by_name=True)

    include_digits: bool = Field(alias="includeDigits")
    """
    Include at least one digit in the password.
    """
    include_symbols: bool = Field(alias="includeSymbols")
    """
    Include at least one symbol in the password.
    """
    length: int
    """
    The length of the password.
    """


class PasswordRecipeTypes(str, Enum):
    MEMORABLE = "Memorable"
    PIN = "Pin"
    RANDOM = "Random"


class PasswordRecipeMemorable(BaseModel):
    type: Literal[PasswordRecipeTypes.MEMORABLE] = PasswordRecipeTypes.MEMORABLE
    parameters: PasswordRecipeMemorableInner


class PasswordRecipePin(BaseModel):
    type: Literal[PasswordRecipeTypes.PIN] = PasswordRecipeTypes.PIN
    parameters: PasswordRecipePinInner


class PasswordRecipeRandom(BaseModel):
    type: Literal[PasswordRecipeTypes.RANDOM] = PasswordRecipeTypes.RANDOM
    parameters: PasswordRecipeRandomInner


PasswordRecipe = Union[PasswordRecipeMemorable, PasswordRecipePin, PasswordRecipeRandom]


class SeparatorType(str, Enum):
    DIGITS = "digits"
    """
    Randomly selected digits.
    E.g, "`correct4horse0battery1staple`"
    """
    DIGITSANDSYMBOLS = "digitsAndSymbols"
    """
    Randomly selected digits and symbols.
    This is useful to get word-based passwords to meet complexity requirements
    E.g, "`correct4horse-battery1staple`"
    """
    SPACES = "spaces"
    """
    Spaces, like the original Diceware.
    Great for mobile keyboards, not so great when people can overhear you type the password.
    E.g, "`correct horse battery staple`"
    """
    HYPHENS = "hyphens"
    """
    Hyphens "`-`".
    E.g, "`correct-horse-battery-staple`"
    """
    UNDERSCORES = "underscores"
    """
    "`_`".
    E.g, "`correct_horse_battery_staple`"
    """
    PERIODS = "periods"
    """
    Period (full stop) "`.`".
    E.g, "`correct.horse.battery.staple`"
    """
    COMMAS = "commas"
    """
    Comma "`,`".
    E.g, "`correct,horse,battery,staple`"
    """


class ValidRecipientEmailInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Email` of the `ValidRecipient` Rust enum
    """

    email: str


class ValidRecipientDomainInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Domain` of the `ValidRecipient` Rust enum
    """

    domain: str


class ValidRecipientTypes(str, Enum):
    EMAIL = "Email"
    DOMAIN = "Domain"


class ValidRecipientEmail(BaseModel):
    """
    This exact email address
    """

    type: Literal[ValidRecipientTypes.EMAIL] = ValidRecipientTypes.EMAIL
    parameters: ValidRecipientEmailInner


class ValidRecipientDomain(BaseModel):
    """
    Anyone with an email address from the specified domain
    """

    type: Literal[ValidRecipientTypes.DOMAIN] = ValidRecipientTypes.DOMAIN
    parameters: ValidRecipientDomainInner


# The validated recipient of an item share
ValidRecipient = Union[ValidRecipientEmail, ValidRecipientDomain]


class WordListType(str, Enum):
    FULLWORDS = "fullWords"
    """
    Agile wordlist
    """
    SYLLABLES = "syllables"
    """
    English-like syllables
    """
    THREELETTERS = "threeLetters"
    """
    Three (random) letter "words"
    """
